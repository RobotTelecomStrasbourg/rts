/*
   Code séance d'initiation du Club Robot
   Parcours d'obstacles

	Conseil :
	1) Suivi de ligne
	2) Odom 1D

	Faire des tests en lançant
 
	NOTICE : Demarrer le robot sur du blanc pour la calibration des capteurs de
		luminosité pour le suivi de ligne.

	Author : Kilian Hett, Valentin Niewada
*/

#define MAXPOWER -70
#define MINPOWER -30

// Constante de temporisation
#define TEMPMIN 150
#define TEMPEVIT 500

// Constante booléenne 
#define True 0==0
#define Flase !True

// Definition des port pour les capteurs
#define SENSORRIGHT S3
#define SENSORLEFT S4
#define SENSORUS S1

// Déclaration de nouveaux types
typedef t_bool int;
typedef t_semaphore bool;


/*
	Definition des variables globales
*/
float captR_ref=0;
float captL_ref=0;
float captR_value=0;
float captL_value=0;

// Puissance moteur
int powerRight=0;
int powerLeft=0;

// Odometrie
int X_parcouru=0;
int X_offset=0;

// Semaphore
t_semaphore sema_sensor=true;
t_semaphore sema_motor=true;

/*
	Thread 1 :  Redressement à droite
 */
task sensorRight()
{
	int accumulator=0;
	captR_ref= SensorValue(SENSORRIGHT)-10;
	while(True)
	{
		captR_value = SensorValue(SENSORRIGHT);
		if (captR_ref > captR_value)
		{
			powerRight = MAXPOWER;
		}
		else
		{
			powerRight = MINPOWER;
		}
		Wait(TEMPMIN);
	}
}

/* 
   Thread 2 : Redressement à gauche
 */
task sensorLeft()
{
	int accumulatori=0;

	captL_ref= SensorValue(SENSORLEFT)-10;
	while(True)
	{
		captL_value= SensorValue(SENSORLEFT);

		if (captL_ref-10>captL_value)
		{
			powerLeft = MAXPOWER;
		}
		else
		{
			powerLeft = MINPOWER;
		}
		Wait(TEMPMIN);
	}
}

/*
	Thread 3 : Odometrie 1D 
 */
task odometrie1D()
{	
	// Calcul de la distance parcouru
	X_parcouru = ((-MotorRotationCount(MOT_DROITE)/360.0)+
		(-MotorRotationCount(MOT_GAUCHE)/360.0))/2;
	X = X_parcouru - X_offset;
}

/*
	Thread 4 : Detection d'obstacle	
*/
task evitemment()
{
	int distance=/* 20 */;
	while (true)
	{
		if (detection(distance)) // TODO Implémenter la detection
		{
			sema_sensor=true;
		}
		else 
		{
			sema_sensor=false;
		}
		Wait(TMPEVIT);
	}
}


/*
	param : int d, distance à parcourir en mm
	
	Fonction permettant de suivre une ligne.
	
	Note: Le robot doit etre correctement positionne
	avant de lancer suivreLigne
*/
void suivreLigne(int d)
{
	X_offset=X_parcouru;
	while (X<d)
	{
		if (!sema_sensor&&!sema_motor)
		{
			OnFwd(OUT_B,powerRight);
			OnFwd(OUT_A,powerLeft);
		}
	}
}

/*
	param : float teta, angle de rotation en degre
	
	Fonction permettant au robot d'effectuer une rotation.
*/
void pivotement(float teta)
{
	sema_sensor=true;
	if(rouge== 1)
	{
		RotateMotorEx(MOTEURS, 80, 11,100, true,true);
	}
	else
	{
		RotateMotorEx(OUT_AB, 80, 11, -100, true,true);
	}
	sema_sensor=false;
}

/*
	param : int dist, distance de detection maximum cm

	Fonction retournant un booleen ( vrai/faux ) indiquant 
	la présence d'un obstacle.
*/
bool detection(int distance)
{
	return (SensorUS(SENSORUS)<distance);
}

/*
   Fonction principale "main"

	Le programme commence ici
 */
task main()
{
	// Configuration des différents capteurs
	SetSensorLight(SENSORRIGHT);
	SetSensorLight(SENSORLEFT);
	SetSensorLowspeed(SENSORUS);

	// Lancement des différents threads
	start sensorRight;
	start sensorLeft;
	start evitemment;
	start odometrie1D;

	while(1==1)
	{
		// TODO Implémenter le code pour faire les différentes
		// actions attendu
	}
}
